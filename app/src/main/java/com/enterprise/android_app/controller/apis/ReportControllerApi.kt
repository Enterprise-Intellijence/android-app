/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import com.enterprise.android_app.controller.BasePath
import io.swagger.client.models.PageReportDTO
import io.swagger.client.models.ReportDTO

import io.swagger.client.infrastructure.*

class ReportControllerApi(basePath: kotlin.String = BasePath.BASE_PATH) : ApiClient(basePath) {

    /**
     * 
     * 
     * @param id  
     * @return ReportDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun closeReport(id: kotlin.String): ReportDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/reports/close/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<ReportDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReportDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return ReportDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createReport(body: ReportDTO): ReportDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/reports"
        )
        val response = request<ReportDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReportDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param status  
     * @param page  
     * @param size  
     * @return PageReportDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getReportsByStatus(status: kotlin.String, page: kotlin.Int, size: kotlin.Int): PageReportDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("status", listOf(status.toString()))
            put("page", listOf(page.toString()))
            put("size", listOf(size.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/reports", query = localVariableQuery
        )
        val response = request<PageReportDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageReportDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param page  (optional, default to 0)
     * @param size  (optional, default to 10)
     * @return PageReportDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun getReportsMeManaging(page: kotlin.Int? = null, size: kotlin.Int? = null): PageReportDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (page != null) {
                put("page", listOf(page.toString()))
            }
            if (size != null) {
                put("size", listOf(size.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/reports/working", query = localVariableQuery
        )
        val response = request<PageReportDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PageReportDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param id  
     * @return ReportDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun updateReport(id: kotlin.String): ReportDTO {
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/reports/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<ReportDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ReportDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
