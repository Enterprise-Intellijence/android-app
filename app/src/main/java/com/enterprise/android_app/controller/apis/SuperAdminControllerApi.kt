/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ProductCategoryDTO
import io.swagger.client.models.SizeDTO
import io.swagger.client.models.UserDTO

import io.swagger.client.infrastructure.*

class SuperAdminControllerApi(basePath: kotlin.String = "https://localhost:8443") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param userId  
     * @param role  
     * @return UserDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun changeRole(userId: kotlin.String, role: kotlin.String): UserDTO {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            put("userId", listOf(userId.toString()))
            put("role", listOf(role.toString()))
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/superAdmin/users/changeRole", query = localVariableQuery
        )
        val response = request<UserDTO>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return ProductCategoryDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createNewCategory(body: ProductCategoryDTO): ProductCategoryDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/superAdmin/categories"
        )
        val response = request<ProductCategoryDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProductCategoryDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @return SizeDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun createNewSize(body: SizeDTO): SizeDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/superAdmin/size"
        )
        val response = request<SizeDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SizeDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param catId  
     * @return void
     */
    fun deleteCategory(catId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/superAdmin/categories/{catId}".replace("{" + "catId" + "}", "$catId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param sizeId  
     * @return void
     */
    fun deleteSize(sizeId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/superAdmin/size/{sizeId}".replace("{" + "sizeId" + "}", "$sizeId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param catId  
     * @return void
     */
    fun productCategoryEnableOrDisable(catId: kotlin.String): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/superAdmin/categories/{catId}".replace("{" + "catId" + "}", "$catId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @param catId  
     * @return ProductCategoryDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun replaceProductCategory(body: ProductCategoryDTO, catId: kotlin.String): ProductCategoryDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/superAdmin/categories/{catId}".replace("{" + "catId" + "}", "$catId")
        )
        val response = request<ProductCategoryDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ProductCategoryDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  
     * @param sizeId  
     * @return SizeDTO
     */
    @Suppress("UNCHECKED_CAST")
    fun replaceSize(body: SizeDTO, sizeId: kotlin.String): SizeDTO {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/superAdmin/size/{sizeId}".replace("{" + "sizeId" + "}", "$sizeId")
        )
        val response = request<SizeDTO>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SizeDTO
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
